diff --git a/core/modules/layout_builder/src/EventSubscriber/BlockComponentRenderArray.php b/core/modules/layout_builder/src/EventSubscriber/BlockComponentRenderArray.php
index e1a9773959..e672fcb426 100644
--- a/core/modules/layout_builder/src/EventSubscriber/BlockComponentRenderArray.php
+++ b/core/modules/layout_builder/src/EventSubscriber/BlockComponentRenderArray.php
@@ -109,6 +109,22 @@ public function onBuildRender(SectionComponentBuildRenderArrayEvent $event) {
         return;
       }
 
+      // If this is a multi-value block configured to not display all values,
+      // remove those field items from the render array.
+      $block_configuration = $block->getConfiguration();
+      if (isset($block_configuration['display_items']) && $block_configuration['display_items'] == 'display_some') {
+        if ($items_to_display = (int) $block_configuration['items_to_display']) {
+          $offset = (int) $block_configuration['offset'];
+          $range = range(0, $content['#items']->count());
+          foreach ($range as $key) {
+            $top_range = $offset + $items_to_display - 1;
+            if ($key < $offset || $key > $top_range) {
+              $content[$key]['#access'] = FALSE;
+            }
+          }
+        }
+      }
+
       $build = [
         // @todo Move this to BlockBase in https://www.drupal.org/node/2931040.
         '#theme' => 'block',
diff --git a/core/modules/layout_builder/src/Form/ConfigureBlockFormBase.php b/core/modules/layout_builder/src/Form/ConfigureBlockFormBase.php
index 696506e75e..9eba4d0167 100644
--- a/core/modules/layout_builder/src/Form/ConfigureBlockFormBase.php
+++ b/core/modules/layout_builder/src/Form/ConfigureBlockFormBase.php
@@ -19,6 +19,8 @@
 use Drupal\layout_builder\Context\LayoutBuilderContextTrait;
 use Drupal\layout_builder\Controller\LayoutRebuildTrait;
 use Drupal\layout_builder\LayoutTempstoreRepositoryInterface;
+use Drupal\layout_builder\Plugin\Block\FieldBlock;
+use Drupal\layout_builder\Plugin\SectionStorage\OverridesSectionStorage;
 use Drupal\layout_builder\SectionComponent;
 use Drupal\layout_builder\SectionStorageInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -174,6 +176,16 @@ public function doBuildForm(array $form, FormStateInterface $form_state, Section
     $subform_state = SubformState::createForSubform($form['settings'], $form, $form_state);
     $form['settings'] = $this->getPluginForm($this->block)->buildConfigurationForm($form['settings'], $subform_state);
 
+    // If this a field block with more than one item, expose the form fields
+    // for displaying a subset of those items.
+    if ($this->block instanceof FieldBlock && $this->sectionStorage instanceof OverridesSectionStorage) {
+      $field_name = $this->block->getFieldName();
+      $field_values_count = $this->sectionStorage->fieldValuesCount($field_name);
+      if ($field_values_count > 1) {
+        $form['settings']['multivalue_wrapper']['#access'] = TRUE;
+      }
+    }
+
     $form['actions']['submit'] = [
       '#type' => 'submit',
       '#value' => $this->submitLabel(),
diff --git a/core/modules/layout_builder/src/Plugin/Block/FieldBlock.php b/core/modules/layout_builder/src/Plugin/Block/FieldBlock.php
index e8a21d12dc..b51e9408bd 100644
--- a/core/modules/layout_builder/src/Plugin/Block/FieldBlock.php
+++ b/core/modules/layout_builder/src/Plugin/Block/FieldBlock.php
@@ -270,6 +270,43 @@ public function blockForm($form, FormStateInterface $form_state) {
       '#suffix' => '</div>',
     ];
 
+    $form['multivalue_wrapper'] = [
+      '#type' => 'container',
+      '#access' => FALSE,
+      'display_items' => [
+        '#title' => $this->t('Multiple items options'),
+        '#type' => 'radios',
+        '#options' => [
+          'display_all' => $this->t('Display all items'),
+          'display_some' => $this->t('Display a specified number of items'),
+        ],
+        '#default_value' => isset($config['display_items']) ? $config['display_items'] : 'display_all',
+      ],
+      'items_to_display' => [
+        '#title' => $this->t('Items to display'),
+        '#type' => 'textfield',
+        '#default_value' => isset($config['items_to_display']) ? $config['items_to_display'] : 0,
+        '#description' => $this->t('Enter 0 for no limit'),
+        '#states' => [
+          'invisible' => [
+            ':input[name="settings[multivalue_wrapper][display_items]"]' => ['value' => 'display_all'],
+          ],
+        ],
+      ],
+      'offset' => [
+        '#title' => $this->t('Offset (number of items to skip)'),
+        '#type' => 'number',
+        '#default_value' => isset($config['offset']) ? $config['offset'] : 0,
+        '#description' => $this->t('For example, set this to 3 and the first 3 items will not be displayed.'),
+        '#states' => [
+          'invisible' => [
+            ':input[name="settings[multivalue_wrapper][display_items]"]' => ['value' => 'display_all'],
+          ],
+        ],
+      ],
+
+    ];
+
     return $form;
   }
 
@@ -335,6 +372,21 @@ public static function formatterSettingsAjaxCallback(array $form, FormStateInter
    */
   public function blockSubmit($form, FormStateInterface $form_state) {
     $this->configuration['formatter'] = $form_state->getValue('formatter');
+
+    // Only layout overrides have access to multivalue_wrapper, so this
+    // prevents multi-value config from being saved to layout defaults.
+    if (!empty($form['settings']['multivalue_wrapper']['#access'])) {
+      $multivalue_fields = [
+        'display_items' => ['multivalue_wrapper', 'display_items'],
+        'items_to_display' => ['multivalue_wrapper', 'items_to_display'],
+        'offset' => ['multivalue_wrapper', 'offset'],
+      ];
+      foreach ($multivalue_fields as $config_key => $form_field) {
+        if ($form_state->hasValue($form_field)) {
+          $this->configuration[$config_key] = $form_state->getValue($form_field);
+        }
+      }
+    }
   }
 
   /**
@@ -351,6 +403,16 @@ protected function getFieldDefinition() {
     return $this->fieldDefinition;
   }
 
+  /**
+   * Returns the field name the block is based on.
+   *
+   * @return string
+   *   The field name.
+   */
+  public function getFieldName() {
+    return $this->fieldDefinition->getName();
+  }
+
   /**
    * Returns an array of applicable formatter options for a field.
    *
diff --git a/core/modules/layout_builder/src/Plugin/SectionStorage/OverridesSectionStorage.php b/core/modules/layout_builder/src/Plugin/SectionStorage/OverridesSectionStorage.php
index cde6f497c5..7106bb7390 100644
--- a/core/modules/layout_builder/src/Plugin/SectionStorage/OverridesSectionStorage.php
+++ b/core/modules/layout_builder/src/Plugin/SectionStorage/OverridesSectionStorage.php
@@ -438,4 +438,17 @@ public function isOverridden() {
     return !empty($this->getSections());
   }
 
+  /**
+   * Returns the number of values in the entity's field.
+   *
+   * @param string $field_name
+   *   The name of the field.
+   *
+   * @return int
+   *   The number of values in the field.
+   */
+  public function fieldValuesCount($field_name) {
+    return $this->getEntity()->hasField($field_name) ? $this->getEntity()->get($field_name)->count() : 0;
+  }
+
 }
diff --git a/core/modules/layout_builder/tests/src/FunctionalJavascript/MultivalueFieldTest.php b/core/modules/layout_builder/tests/src/FunctionalJavascript/MultivalueFieldTest.php
new file mode 100644
index 0000000000..8409688589
--- /dev/null
+++ b/core/modules/layout_builder/tests/src/FunctionalJavascript/MultivalueFieldTest.php
@@ -0,0 +1,176 @@
+<?php
+
+namespace Drupal\Tests\layout_builder\FunctionalJavascript;
+
+use Drupal\Core\Field\FieldStorageDefinitionInterface;
+use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
+use Drupal\Tests\contextual\FunctionalJavascript\ContextualLinkClickTrait;
+use Drupal\field\Entity\FieldConfig;
+use Drupal\field\Entity\FieldStorageConfig;
+use Drupal\node\Entity\Node;
+
+/**
+ * Test display of fields with multiple values.
+ *
+ * @group layout_builder
+ */
+class MultivalueFieldTest extends WebDriverTestBase {
+
+  use ContextualLinkClickTrait;
+
+  /**
+   * Path prefix for the field UI for the test bundle.
+   *
+   * @var string
+   */
+  const FIELD_UI_PREFIX = 'admin/structure/types/manage/bundle_with_section_field';
+
+  /**
+   * {@inheritdoc}
+   */
+  protected static $modules = [
+    'layout_builder',
+    'node',
+    'contextual',
+  ];
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function setUp() {
+    parent::setUp();
+    $this->createContentType(['type' => 'bundle_with_section_field']);
+    $this->drupalLogin($this->drupalCreateUser([
+      'configure any layout',
+      'administer node display',
+      'administer node fields',
+      'access contextual links',
+    ]));
+
+    $this->drupalPostForm(static::FIELD_UI_PREFIX . '/display/default', ['layout[enabled]' => TRUE], 'Save');
+    $this->drupalPostForm(static::FIELD_UI_PREFIX . '/display/default', ['layout[allow_custom]' => TRUE], 'Save');
+
+    FieldStorageConfig::create([
+      'entity_type' => 'node',
+      'field_name' => 'multi_textfield',
+      'type' => 'text',
+      'cardinality' => FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED,
+    ])->save();
+    FieldConfig::create([
+      'field_name' => 'multi_textfield',
+      'entity_type' => 'node',
+      'bundle' => 'bundle_with_section_field',
+    ])->save();
+    \Drupal::service('entity_display.repository')->getViewDisplay('node', 'bundle_with_section_field', 'default')
+      ->setComponent('multi_textfield', ['type' => 'string'])
+      ->save();
+
+    $node = Node::create([
+      'type' => 'bundle_with_section_field',
+      'title' => 'Kicker of Elves',
+    ]);
+    $node->multi_textfield->appendItem('The first item');
+    $node->multi_textfield->appendItem('The second item');
+    $node->multi_textfield->appendItem('The third item');
+    $node->multi_textfield->appendItem('The fourth item');
+    $node->multi_textfield->appendItem('The fifth item');
+    $node->multi_textfield->appendItem('The sixth item');
+    $node->multi_textfield->appendItem('The seventh item');
+    $node->save();
+  }
+
+  /**
+   * Tests display of partial contents of multivalue fields.
+   *
+   * @dataProvider testMultiValueFieldProvider
+   */
+  public function testMultiValueField($params) {
+    $assert_session = $this->assertSession();
+    $page = $this->getSession()->getPage();
+
+    $multiple_field_items = [
+      'The first item',
+      'The second item',
+      'The third item',
+      'The fourth item',
+      'The fifth item',
+      'The sixth item',
+      'The seventh item',
+    ];
+
+    $should_not_be_visible = array_diff($multiple_field_items, $params['should_be_visible']);
+
+    $this->drupalGet('node/1/layout');
+
+    foreach ($multiple_field_items as $item) {
+      $assert_session->pageTextContains($item);
+    }
+
+    $this->clickContextualLink('.block-field-blocknodebundle-with-section-fieldmulti-textfield', 'Configure');
+    $assert_session->assertWaitOnAjaxRequest();
+    $this->assertTrue($assert_session->waitForElementVisible('css', '#drupal-off-canvas'));
+    $page->selectFieldOption('settings[multivalue_wrapper][display_items]', $params['display_items']);
+    $this->assertTrue($assert_session->waitForElementVisible('css', '[name="settings[multivalue_wrapper][items_to_display]"]'));
+    $page->fillField('settings[multivalue_wrapper][items_to_display]', $params['items_to_display']);
+    $page->fillField('settings[multivalue_wrapper][offset]', $params['offset']);
+    $page->pressButton('Update');
+    $assert_session->assertWaitOnAjaxRequest();
+    $assert_session->assertNoElementAfterWait('css', '#drupal-off-canvas');
+
+    foreach ($params['should_be_visible'] as $item) {
+      $assert_session->pageTextContains($item);
+    }
+    foreach ($should_not_be_visible as $item) {
+      $assert_session->pageTextNotContains($item);
+    }
+
+    $page->pressButton('Save layout');
+
+    foreach ($params['should_be_visible'] as $item) {
+      $assert_session->pageTextContains($item);
+    }
+    foreach ($should_not_be_visible as $item) {
+      $assert_session->pageTextNotContains($item);
+    }
+  }
+
+  /**
+   * Provider for testMultiValueField().
+   */
+  public function testMultiValueFieldProvider() {
+    return [
+      'offset' => [
+        'params' => [
+          'display_items' => 'display_some',
+          'items_to_display' => 2,
+          'offset' => 2,
+          'should_be_visible' => [
+            'The third item',
+            'The fourth item',
+          ],
+        ],
+      ],
+      'no_offset' => [
+        'params' => [
+          'display_items' => 'display_some',
+          'items_to_display' => 3,
+          'offset' => 0,
+          'should_be_visible' => [
+            'The first item',
+            'The second item',
+            'The third item',
+          ],
+        ],
+      ],
+      'offset_too_high' => [
+        'params' => [
+          'display_items' => 'display_some',
+          'items_to_display' => 3,
+          'offset' => 7,
+          'should_be_visible' => [],
+        ],
+      ],
+    ];
+  }
+
+}
diff --git a/php_errors.log b/php_errors.log
new file mode 100644
index 0000000000..b203430af4
--- /dev/null
+++ b/php_errors.log
@@ -0,0 +1,3 @@
+[19-Jun-2019 16:05:13 America/New_York] Uncaught PHP Exception Drupal\Component\Plugin\Exception\ContextException: "The 'entity:node' context is required and not present." at /Users/ben.mullins/Sites/drupal/core/lib/Drupal/Core/Plugin/Context/Context.php line 73
+[19-Jun-2019 16:05:21 America/New_York] Uncaught PHP Exception Drupal\Component\Plugin\Exception\ContextException: "The 'entity:node' context is required and not present." at /Users/ben.mullins/Sites/drupal/core/lib/Drupal/Core/Plugin/Context/Context.php line 73
+[20-Jun-2019 23:01:42 Australia/Sydney] PHP Parse error:  syntax error, unexpected ';', expecting ',' or ')' in /Users/ben.mullins/Sites/drupal/core/modules/layout_builder/tests/src/FunctionalJavascript/MultivalueFieldTest.php on line 125
