diff --git a/README.Predis.txt b/README.Predis.txt
index 09bbbce..f28ebb5 100644
--- a/README.Predis.txt
+++ b/README.Predis.txt
@@ -34,4 +34,16 @@ $settings['redis.connection']['replication.host'][2]['role'] = 'replica';
 $settings['redis.connection']['replication.host'][3]['host'] = '1.2.3.6';
 $settings['redis.connection']['replication.host'][3]['port'] = '6379';
 $settings['redis.connection']['replication.host'][3]['role'] = 'replica';
-$settings['cache']['default'] = 'cache.backend.redis';
\ No newline at end of file
+$settings['cache']['default'] = 'cache.backend.redis';
+
+Configuration of module for use over SSL/TLS
+----------------------------
+By default Redis will opperate over tcp. Predis, however, supports connections over tls. This can be enabled be setting the scheme like this:
+
+$settings['redis.connection']['scheme'] = 'tls'; // Use redis over TLS.
+
+Configuration of module to use Predis with persistent connection
+---------------------------------------------------------
+By defaults Predis have false the persistent connection, to use a persistent connection add this in the setting.php
+
+$settings ['redis.connection'] ['persistent'] = 1;
\ No newline at end of file
diff --git a/src/Client/Predis.php b/src/Client/Predis.php
index 747d73a..51351b3 100644
--- a/src/Client/Predis.php
+++ b/src/Client/Predis.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\redis\Client;
 
+use Drupal\redis\ClientFactory;
 use Drupal\redis\ClientInterface;
 use Predis\Client;
 
@@ -11,12 +12,14 @@ use Predis\Client;
  */
 class Predis implements ClientInterface {
 
-  public function getClient($host = NULL, $port = NULL, $base = NULL, $password = NULL, $replicationHosts = NULL) {
+  public function getClient($host = NULL, $port = NULL, $base = NULL, $password = NULL, $scheme = NULL, $persistent = NULL, $replicationHosts = NULL) {
     $connectionInfo = [
       'password' => $password,
       'host'     => $host,
       'port'     => $port,
-      'database' => $base
+      'database' => $base,
+      'scheme'   => $scheme,
+      'persistent' => $persistent
     ];
 
     foreach ($connectionInfo as $key => $value) {
@@ -33,15 +36,19 @@ class Predis implements ClientInterface {
 
     // If we are passed in an array of $replicationHosts, we should attempt a clustered client connection.
     if ($replicationHosts !== NULL) {
+      $persistent_value = isset($connectionInfo['persistent']) ? 'persistent='. $connectionInfo['persistent'].'&' : '?';
       $parameters = [];
 
       foreach ($replicationHosts as $replicationHost) {
+        if (!isset($replicationHost['scheme']) || empty($replicationHost['scheme'])) {
+          $replicationHost['scheme'] = ClientFactory::REDIS_DEFAULT_SCHEME;
+        }
         // Configure master.
         if ($replicationHost['role'] === 'primary') {
-          $parameters[] = 'tcp://' . $replicationHost['host'] . ':' . $replicationHost['port'] . '?alias=master';
+          $parameters[] = $replicationHost['scheme'] . '://' . $replicationHost['host'] . ':' . $replicationHost['port'] . $persistent_value .'alias=master';
         }
         else {
-          $parameters[] = 'tcp://' . $replicationHost['host'] . ':' . $replicationHost['port'];
+          $parameters[] = $replicationHost['scheme'] . '://' . $replicationHost['host'] . ':' . $replicationHost['port'] . $persistent_value;
         }
       }
 
diff --git a/src/ClientFactory.php b/src/ClientFactory.php
index cddabd9..7865b16 100644
--- a/src/ClientFactory.php
+++ b/src/ClientFactory.php
@@ -17,6 +17,11 @@ class ClientFactory {
    */
   const REDIS_DEFAULT_PORT = 6379;
 
+  /**
+   * Redis default persistant
+   */
+  const REDIS_DEFAULT_PERSISTENT = FALSE;
+
   /**
    * Redis default database: will select none (Database 0).
    */
@@ -27,6 +32,11 @@ class ClientFactory {
    */
   const REDIS_DEFAULT_PASSWORD = NULL;
 
+  /**
+   * Redis default scheme: will not authenticate.
+   */
+  const REDIS_DEFAULT_SCHEME = 'tcp';
+
   /**
    * Cache implementation namespace.
    */
@@ -150,6 +160,7 @@ class ClientFactory {
         'port' => self::REDIS_DEFAULT_PORT,
         'base' => self::REDIS_DEFAULT_BASE,
         'password' => self::REDIS_DEFAULT_PASSWORD,
+        'scheme' => self::REDIS_DEFAULT_SCHEME,
       ];
 
       // If using replication, lets create the client appropriately.
@@ -165,6 +176,8 @@ class ClientFactory {
           $settings['port'],
           $settings['base'],
           $settings['password'],
+          $settings['scheme'],
+          $settings['persistent'],
           $settings['replication.host']);
       }
       else {
@@ -172,7 +185,9 @@ class ClientFactory {
           $settings['host'],
           $settings['port'],
           $settings['base'],
-          $settings['password']);
+          $settings['password'],
+          $settings['scheme'],
+          $settings['persistent']);
       }
     }
 
